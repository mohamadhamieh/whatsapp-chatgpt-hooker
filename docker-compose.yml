version: "3.8"
services:
  zoo1:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
#    volumes:
#      - zoovolume:/var/lib/zookeeper/data
#      - zoovolume2:/var/lib/zookeeper/log
  kafka1:
    image: confluentinc/cp-kafka:7.3.0
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
#    volumes:
#      - kafkavolume:/var/lib/kafka/data
    depends_on:
      - zoo1

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:7.3.0
    hostname: kafka-schema-registry
    container_name: kafka-schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:19092
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - zoo1
      - kafka1

  kafka-topics-creation:
    build:
      context: ./kafka-topics-creation
      dockerfile: Dockerfile
    environment:
      BOOTSTRAP_SERVERS: kafka1:19092
    depends_on:
      - zoo1
      - kafka1

  kafka-huroku-listener:
    build:
      context: ./kafka-huroku-listener
      dockerfile: Dockerfile
    environment:
      CALLBACK_URL: ##====> your callback url to receive whatsapp messages
      BOOTSTRAP_SERVERS: kafka1:19092
    depends_on:
      - zoo1
      - kafka1
      - kafka-topics-creation

  chat-gpt-processor:
      build:
        context: ./chatgpt-processor
        dockerfile: Dockerfile
      environment:
        BOOTSTRAP_SERVERS: kafka1:19092
      depends_on:
        - zoo1
        - kafka1
        - kafka-huroku-listener
        - kafka-topics-creation

  chat-gpt-listener:
      build:
        context: ./chatgpt-listener
        dockerfile: Dockerfile
      environment:
        BOOTSTRAP_SERVERS: kafka1:19092
        BEARER: ## OpenAI Bearer token
        WHATSAPP_API: #Whatsapp API Url
        WHATSAPP_BEARER: #Whatsapp Bearer Token
        OPENAI_URL: #OpenAI url
      depends_on:
        - zoo1
        - kafka1
        - kafka-huroku-listener
        - chat-gpt-processor
        - kafka-topics-creation

  onboard-processor:
    build:
      context: ./onboard-processor
      dockerfile: Dockerfile
    environment:
      BOOTSTRAP_SERVERS: kafka1:19092
      ADMIN_PHONE: #Admin phone number you will use to onboard whatsapp contacts to use ChatGpt
    depends_on:
      - kafka1
      - zoo1
      - kafka-huroku-listener
      - kafka-topics-creation
  onboard-listener:
    build:
      context: ./onboard-listener
      dockerfile: Dockerfile
    environment:
      BOOTSTRAP_SERVERS: kafka1:19092
      WHATSAPP_API: #Whatsapp API url
      WHATSAPP_BEARER: #Whatsapp Bearer token
      TEMPLATE_NAME: #Whatsapp onboard template
    depends_on:
      - kafka1
      - zoo1
      - kafka-huroku-listener
      - onboard-processor
      - kafka-topics-creation

#volumes:
#  zoovolume:
#  zoovolume2:
#  kafkavolume:
